import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../models/entry.dart';

class ItemTile extends StatefulWidget {
  final Entry item;
  final VoidCallback onTap;
  final VoidCallback onDelete;
  final ValueChanged<Entry>? onEdit;

  const ItemTile({
    Key? key,
    required this.item,
    required this.onTap,
    required this.onDelete,
    this.onEdit,
  }) : super(key: key);

  @override
  State<ItemTile> createState() => _ItemTileState();
}

class _ItemTileState extends State<ItemTile> {
  bool _isExpanded = false;
  bool _isEditing = false;
  late TextEditingController _descriptionController;
  late TextEditingController _detailsController;
  late TextEditingController _amountController;

  @override
  void initState() {
    super.initState();
    _descriptionController = TextEditingController(text: widget.item.description);
    _detailsController = TextEditingController(text: widget.item.details ?? '');
    _amountController = TextEditingController(text: widget.item.amount.toString());
  }

  @override
  void dispose() {
    _descriptionController.dispose();
    _detailsController.dispose();
    _amountController.dispose();
    super.dispose();
  }

  void _toggleEdit() {
    setState(() {
      _isEditing = !_isEditing;
      if (!_isEditing) {
        // Reset values when cancelling edit
        _descriptionController.text = widget.item.description;
        _detailsController.text = widget.item.details ?? '';
        _amountController.text = widget.item.amount.toString();
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Dismissible(
      key: Key(widget.item.id),
      direction: DismissDirection.endToStart,
      confirmDismiss: (_) => showDialog<bool>(
        context: context,
        builder: (context) => AlertDialog(
          title: const Text('Delete Item'),
          content: const Text('Are you sure you want to delete this item?'),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(false),
              child: const Text('CANCEL'),
            ),
            TextButton(
              onPressed: () => Navigator.of(context).pop(true),
              child: const Text('DELETE'),
            ),
          ],
        ),
      ),
      onDismissed: (_) => widget.onDelete(),
      background: Container(
        color: Colors.red,
        alignment: Alignment.centerRight,
        padding: const EdgeInsets.only(right: 16.0),
        child: const Icon(Icons.delete, color: Colors.white),
      ),
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
        child: Material(
          color: Theme.of(context).colorScheme.surface,
          elevation: 1,
          surfaceTintColor: Theme.of(context).colorScheme.surfaceTint,
          shadowColor: Theme.of(context).colorScheme.shadow.withOpacity(0.2),
          borderRadius: BorderRadius.circular(12),
          child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
        child: DecoratedBox(
          decoration: BoxDecoration(
            color: Theme.of(context).colorScheme.surface,
            borderRadius: BorderRadius.circular(12),
            boxShadow: [
              BoxShadow(
                color: Theme.of(context).colorScheme.shadow.withOpacity(0.05),
                blurRadius: 8,
                offset: const Offset(0, 2),
              ),
            ],
            border: Border.all(
              color: Theme.of(context).colorScheme.outlineVariant.withOpacity(0.2),
            ),
          ),
          child: ClipRRect(
            borderRadius: BorderRadius.circular(12),
            child: ExpansionTile(
          shape: const RoundedRectangleBorder(
            borderRadius: BorderRadius.vertical(top: Radius.circular(12)),
          ),
          collapsedShape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          child: Container(
        margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(12),
          border: Border.all(
            color: Theme.of(context).colorScheme.outlineVariant.withOpacity(0.5),
          ),
          color: Theme.of(context).colorScheme.surface,
        ),
        clipBehavior: Clip.antiAlias,
        child: ExpansionTile(
          onExpansionChanged: (expanded) {
            setState(() {
              _isExpanded = expanded;
              if (!expanded && _isEditing) {
                _isEditing = false;
                // Save changes when collapsing while editing
                final updatedItem = widget.item.copyWith(
                  description: _descriptionController.text,
                  details: _detailsController.text.isEmpty ? null : _detailsController.text,
                  amount: double.tryParse(_amountController.text) ?? widget.item.amount,
                );
                widget.onEdit?.call(updatedItem);
              }
            });
          },
          shape: const RoundedRectangleBorder(
            borderRadius: BorderRadius.vertical(top: Radius.circular(12)),
          ),
          collapsedShape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        title: _isEditing
          ? TextField(
              controller: _descriptionController,
              decoration: const InputDecoration(
                isDense: true,
                contentPadding: EdgeInsets.symmetric(vertical: 8),
              ),
            )
          : Text(widget.item.description),
        subtitle: _isEditing
          ? TextField(
              controller: _detailsController,
              decoration: const InputDecoration(
                isDense: true,
                contentPadding: EdgeInsets.symmetric(vertical: 8),
                hintText: 'Details (optional)',
              ),
            )
          : widget.item.details != null ? Text(widget.item.details!) : null,
        trailing: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            if (_isEditing)
              SizedBox(
                width: 100,
                child: TextField(
                  controller: _amountController,
                  decoration: const InputDecoration(
                    isDense: true,
                    contentPadding: EdgeInsets.symmetric(vertical: 8),
                    prefixText: '\$',
                  ),
                  keyboardType: const TextInputType.numberWithOptions(decimal: true),
                  inputFormatters: [
                    FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d{0,2}')),
                  ],
                ),
              )
            else
              Text(
                '${widget.item.type == EntryType.expense ? "-" : "+"}\$${widget.item.amount.toStringAsFixed(2)}',
                style: TextStyle(
                  color: widget.item.type == EntryType.expense ? Colors.red : Colors.green,
                  fontWeight: FontWeight.bold,
                ),
              ),
            if (_isExpanded && !_isEditing)
              IconButton(
                icon: const Icon(Icons.edit),
                onPressed: _toggleEdit,
              ),
          ],
        ),
        children: [
          Container(
            decoration: BoxDecoration(
              color: Theme.of(context).colorScheme.surfaceVariant.withOpacity(0.1),
              borderRadius: const BorderRadius.vertical(bottom: Radius.circular(12)),
            ),
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                if (_isEditing) ...[
                  Align(
                    alignment: Alignment.centerRight,
                    child: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        IconButton(
                          onPressed: () {
                            final updatedItem = widget.item.copyWith(
                              description: _descriptionController.text,
                              details: _detailsController.text.isEmpty ? null : _detailsController.text,
                              amount: double.tryParse(_amountController.text) ?? widget.item.amount,
                              type: EntryType.expense,
                            );
                            widget.onEdit?.call(updatedItem);
                            setState(() {
                              _isEditing = false;
                              _isExpanded = false;
                            });
                          },
                          icon: const Icon(Icons.remove_circle_outline),
                          style: IconButton.styleFrom(
                            backgroundColor: Colors.red.withOpacity(0.1),
                            foregroundColor: Colors.red,
                          ),
                          visualDensity: VisualDensity.compact,
                        ),
                        IconButton(
                          onPressed: () {
                            final updatedItem = widget.item.copyWith(
                              description: _descriptionController.text,
                              details: _detailsController.text.isEmpty ? null : _detailsController.text,
                              amount: double.tryParse(_amountController.text) ?? widget.item.amount,
                              type: EntryType.revenue,
                            );
                            widget.onEdit?.call(updatedItem);
                            setState(() {
                              _isEditing = false;
                              _isExpanded = false;
                            });
                          },
                          icon: const Icon(Icons.add_circle_outline),
                          style: IconButton.styleFrom(
                            backgroundColor: Colors.green.withOpacity(0.1),
                            foregroundColor: Colors.green,
                          ),
                          visualDensity: VisualDensity.compact,
                        ),
                        IconButton(
                          onPressed: () {
                            _descriptionController.text = widget.item.description;
                            _detailsController.text = widget.item.details ?? '';
                            _amountController.text = widget.item.amount.toString();
                            setState(() => _isEditing = false);
                          },
                          icon: const Icon(Icons.close),
                          style: IconButton.styleFrom(
                            foregroundColor: Theme.of(context).colorScheme.onSurfaceVariant,
                          ),
                          visualDensity: VisualDensity.compact,
                        ),
                      ],
                    ),
                  ),
                  const Padding(
                    padding: EdgeInsets.only(top: 16.0),
                    child: Divider(),
                  ),
                ],
                if (widget.item.details?.isNotEmpty ?? false) ...[
                  Align(
                    alignment: Alignment.centerLeft,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Details',
                          style: Theme.of(context).textTheme.titleSmall,
                        ),
                        const SizedBox(height: 4),
                        Text(
                          widget.item.details!,
                          style: Theme.of(context).textTheme.bodyMedium,
                        ),
                        const SizedBox(height: 16),
                      ],
                    ),
                  ),
                ],
                Align(
                  alignment: Alignment.centerLeft,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Created',
                        style: Theme.of(context).textTheme.labelSmall?.copyWith(
                          color: Theme.of(context).colorScheme.outline,
                        ),
                      ),
                      Text(
                        widget.item.createdAt.toLocal().toString().split('.')[0],
                        style: Theme.of(context).textTheme.bodyMedium,
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
